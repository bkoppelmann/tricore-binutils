@c Copyright (C) 1998-2003 Free Software Foundation, Inc.
@c Contributed by Michael Schumacher (mike@hightec-rt.com).
@c This is part of the GAS manual.
@c For copying conditions, see the file as.texinfo.
@ifset GENERIC
@page
@end ifset
@node TriCore-Dependent
@chapter Tricore Dependent Features

@cindex TriCore support
@menu
* TriCore Options::             Options
* TriCore Pseudo-opcodes::	Additional Pseudo-opcodes
* TriCore Syntax::		TriCore Assembler Syntax
* TriCore PCP Support::		Support for TriCore's PCP coprocessor
@end menu

@node TriCore Options
@section Options

@cindex options for TriCore
@cindex TriCore options
@cindex architectures, TriCore
The following TriCore-specific command line options are implemented:

@table @code
@kindex --dont-optimize
@kindex --insn32-only
@kindex --insn32-preferred
@kindex --enforce-aligned-data
@kindex -V
@kindex -Y
@kindex -mtc10 | -mrider-a | -mTriCore:Rider-A
@kindex -mtc12 | -mrider-b | -mTriCore:Rider-B
@kindex -mtc13 | -mrider-d | -mTriCore:Rider-D
@kindex -mtc2 | -mTriCore:V2
@kindex -mcpu9
@kindex -mcpu34
@kindex -mcpu48
@kindex -mcpu50
@kindex -mcpu60
@kindex -mcpu70
@kindex -mcpu72

@item --dont-optimize | --insn32-only | --insn32-preferred
If none of the above (mutually-exclusive) options is specified,
@code{@value{AS}} will always try to find the shortest possible opcode
that fits a given mnemonic instruction.  If an instruction is available
in both 16-bit and 32-bit formats (e.g., @code{nop}), then the 16-bit
instruction is chosen in favor of the 32-bit instruction.  If a mnemonic
instruction results in a 32-bit instruction, @code{@value{AS}} tries to
optimize it by finding an equivalent 16-bit instruction (e.g.,
@code{add %dn,%dn,%dm} will be replaced by the 16-bit instruction
@code{add %dn,%dm}).  This means that neither a compiler nor an assembler
programmer needs to care about emitting or writing down the shortest
possible instructions, as this is done automatically by @code{@value{AS}}.

@item --dont-optimize
Use this option to prevent the assembler from optimizing
32-bit instructions.  However, you can use the @code{.optim}
pseudo-opcode to enable optimization for the next instruction
following @code{.optim}, thus temporarily overriding this option.

@item --insn32-only
This directs the assembler to exclusively emit 32-bit opcodes.
16-bit instructions will be replaced with their 32-bit equivalent,
and the pseudo-opcode @code{.code16} will be ignored.

@item --insn32-preferred
This option is similar to @code{--insn32-only} in that it prevents
optimizing and replaces 16-bit instructions with their 32-bit equivalent,
but the pseudo-opcode @code{.code16} will be honored.

@item --enforce-aligned-data
When enabled, N-byte constants generated by @code{.short}, @code{.word},
and related pseudo-opcodes are automatically aligned to a N-byte boundary
within their respective section.  This is not the default, as compilers
(notably @code{tricore-gcc}) may take care of alignment themselves and omit
alignment statements deliberately in order to initialize @code{packed}
structures.

@item -V
This option directs @code{@value{AS}} to print its version number
prior to processing the given files (or standard input).

@item -Y
This is useful for debugging @code{@value{AS}}, as it shows its
internal state, how mnemonics and operands are parsed, and which
opcode is chosen for a given mnemonic instruction.

@item -mtc10
@itemx -mrider-a | -mTriCore:Rider-A
Use one of these options to assemble for TriCore's TC1v1.0 (aka Rider-A)
instruction set architecture (ISA).  Such modules are incompatible with
modules assembled for any other version of the TriCore architecture.
This option is deprecated; support for TC1v1.0 will be dropped in one
of the next releases of @code{@value{AS}}.

@item -mtc12
@itemx -mrider-b | -mTriCore:Rider-B
Use one of these options to assemble for TriCore's TC1v1.2 (aka Rider-B)
instruction set architecture (ISA).  Such modules are compatible with
modules assembled for the TC1v1.3 or TC2.

@item -mtc13
@itemx -mrider-d | -mTriCore:Rider-D
Use one of these options to assemble for TriCore's TC1v1.3 (aka Rider-D)
instruction set architecture (ISA).  This is the default, and such modules
are compatible with modules assembled for the TC1v1.2 or TC2.

@item -mtc2
@itemx -mTriCore:V2
Use one of these options to assemble for TriCore's TC2 instruction set
architecture (ISA).  Such modules are compatible with modules assembled
for the TC1v1.2 or TC1v1.3.

@item -mcpu9
Use this option to automatically insert two @code{nop} instructions after each
@code{dsync} instruction.  This is meant to be a workaround for TriCore chips
which are affected by the bug documented as @sc{CPU.9} or @sc{COR17}
in the Errata Sheets for Rider-B and Rider-D, respectively.  When this option
is enabled and a @code{dsync} instruction is detected, two additional
@code{nop} instructions will be generated using the same options that were
active for the generation of the @code{dsync} instruction itself, so
@code{.code32; dsync} will produce three 32-bit opcodes, while @code{dsync}
alone will produce one 32-bit and two 16-bit opcodes, unless you've also
specified one of the options @code{--insn32-only} or @code{--insn32-preferred},
in which case three 32-bit opcodes are emitted.  Note: use this option only
for manually written assembler files, not for assembler files generated by
@code{tricore-gcc}, which already implements its own workaround for this bug.
Also note that the options @code{-mcpu9} and @code{-mcpu34} are mutually
exclusive; if both are specified, the last option specified wins.

@item -mcpu34
This option is very similar to @code{-mcpu9} in that it enables a workaround
for the CPU bug @sc{COR17} (also referred to as @sc{CPU_TC.034} in recent
Errata Sheets), except that it inserts an @code{isync} after a @code{dsync}
instruction; see the Errata Sheet for your particular TriCore chip to
find out whether it is affected by this bug and which workaround to apply.
Use this option only for manually written assembler files, as the compiler
already implements its own workaround for this bug.  Note that the options
@code{-mcpu34} and @code{-mcpu9} are mutually exclusive; if both are
specified, the last option specified wins.

@item -mcpu48
This option enables a workaround for the CPU bug @sc{CPU_TC.048}, which
requires inserting a @code{nop} after a @code{ld.[a,da]} instruction
and an immediately following indirect jump or call instruction that
uses the just loaded address register.  If your particular TriCore chip
is affected by this bug, you should use this option for both manually
written and compiler-generated assembler files.

@item -mcpu50
This option enables a workaround for the CPU bug @sc{CPU_TC.050}, which
requires inserting a @code{nop} after certain multi-cycle integer 
instructions if they are immediately followed by a load instruction.
If your particular TriCore chip is affected by this bug, you should use
this option for both manually written and compiler-generated assembler
files.

@item -mcpu60
This option enables a workaround for the CPU bug @sc{CPU_TC.060}, which
requires inserting a @code{nop} after a @code{ld.[a,da]} instruction
and an immediately following @code{ld.[d,w]} instruction that uses the
just loaded address register.  If your particular TriCore chip is
affected by this bug, you should use this option for both manually
written and compiler-generated assembler files.

@item -mcpu70
This option enables a workaround for the CPU bug @sc{CPU_TC.070}, which
requires inserting one or two @code{nop}s after a conditional jump
instruction and an immediately following @code{loop} instruction.  If
your particular TriCore chip is affected by this bug, you should use this
option for both manually written and compiler-generated assembler files.

@item -mcpu72
This option enables a workaround for the CPU bug @sc{CPU_TC.072}, which
requires inserting a @code{nop} after a @code{ld.[a,da]} instruction
and an immediately following @code{loop} instruction that uses the
just loaded address register.  If your particular TriCore chip is
affected by this bug, you should use this option for both manually
written and compiler-generated assembler files.

@end table


@node TriCore Pseudo-opcodes
@section Additional Pseudo-opcodes

@cindex TriCore pseudo-opcodes
@cindex pseudo-opcodes, TriCore
The TriCore version of @code{@value{AS}} supports the following additional
pseudo-opcodes:

@table @code
@cindex @code{code16} pseudo-opcodes, TriCore
@item .code16
Directs the assembler to emit a 16-bit opcode for the next instruction
following this directive.  If it is not possible to find a 16-bit
opcode, an error message is issued.

@cindex @code{code32} pseudo-opcodes, TriCore
@item .code32
Directs the assembler to emit a 32-bit opcode for the next instruction
following this directive.  With TriCore's current instruction sets, it
is always possible to find a 32-bit equivalent for 16-bit opcodes.

@cindex @code{optim} pseudo-opcodes, TriCore
@item .optim
Directs the assembler to try to optimize the next instruction
following this directive.  This pseudo-opcode is honored even if
the @code{--dont-optimize} option was specified.

@cindex @code{noopt} pseudo-opcodes, TriCore
@item .noopt
Prevents the assembler from trying to optimize the next instruction
following this directive.

@cindex @code{word} pseudo-opcodes, TriCore
@item .word @code{expr}[,@code{expr}...]
Evaluates each expression @code{expr} and appends their 32-bit results to
the current section; these words are not auto-aligned unless the option
@code{--enforce-aligned-data} was specified.  If an @code{expr} references
an unknown symbol, a relocation entry will be generated for the linker to
resolve.

@cindex @code{blcomm} pseudo-opcodes, TriCore
@item .blcomm @var{name}@code{,size,align}
Creates a symbol named @var{name} in the local BSS section, aligns it to
@code{align} bytes (must be a power of two) and allocates @code{size} bytes
for it in that section.

@cindex @code{toc} pseudo-opcodes, TriCore
@item .toc
Enters the @code{.toc} section; if this section doesn't exist already, it
will be created automatically.  The ".toc" section is used to store
data that can be quicky addressed using a function's TOC pointer
(@code{%a12}).

@cindex @code{rodata} pseudo-opcodes, TriCore
@item .rodata
Enters the @code{.rodata} section; if this section doesn't exist already, it
will be created automatically.  The ".rodata" section is used to store
read-only data (e.g., constants).

@cindex @code{sdata} pseudo-opcodes, TriCore
@item .sdata
Enters the @code{.sdata} section; if this section doesn't exist already, it
will be created automatically.  The ".sdata" section is used to store
initialized data that can be quickly addressed using the small data
area pointer (%a0).

@cindex @code{sbss} pseudo-opcodes, TriCore
@item .sbss
Enters the @code{.sbss} section; if this section doesn't exist already, it
will be created automatically. The ".sbss" section is used to store
uninitialized data that can be quickly addressed using the small data
area pointer (%a0).

@cindex @code{zdata} pseudo-opcodes, TriCore
@item .zdata
Enters the @code{.zdata} section; if this section doesn't exist already, it
will be created automatically.  The ".zdata" section is used to store
initialized data that can be quickly addressed using TriCore's
absolute addressing mode.

@cindex @code{zbss} pseudo-opcodes, TriCore
@item .zbss
Enters the @code{.zbss} section; if this section doesn't exist already, it
will be created automatically.  The ".zbss" section is used to store
uninitialized data that can be quickly addressed using TriCore's
absolute addressing mode.

@cindex @code{pcptext} pseudo-opcodes, TriCore
@item .pcptext
Enters the PCP (Peripheral Control Processor) text section; if this
section doesn't exist already, it will be created automatically.  The PCP
text section is used to store PCP code.  Upon entering this section,
@code{as} expects PCP mnemonics instead of TriCore instructions; you
can return to the normal behaviour simply by leaving the PCP text section,
e.g. with @samp{.text}, which (re-) enters the TriCore text section.
This makes it possible to embed PCP programs as inline assembler in C
or C++ modules, provided you're using the TriCore port of GCC, the GNU
compiler collection.

@cindex @code{pcpdata} pseudo-opcodes, TriCore
@item .pcpdata
Enters the PCP (Peripheral Control Processor) data section; if this
section doesn't exist already, it will be created automatically.  The PCP
data section is used to store contexts and parameters for the PCP.  Note
that the PCP can access this section only word-wise (i.e., in quantities
of 32 bits), so you should only use @samp{.word} pseudo-ops to fill it,
even though @code{as} also accepts @samp{.byte}, @samp{.half} and other
pseudo-ops that can be used to define memory values of various sizes.

@cindex @code{pcpinitword} pseudo-opcodes, TriCore
@item .pcpinitword @var{initPC},@var{initDPTR},@var{initFLAGS}
Computes and appends a 32-bit value to the current section (which must be
a PCP data section) that can be used to initialize PCP register @code{R7}
from a channel's context save area if the PCP is operated in `Channel Resume
Mode'.  @var{initPC} is typically a label in a PCP code section that
points the first instruction the PCP should execute
when the respective channel is triggered.  @var{initPC} may also be
specified as an absolute expression that results in a value between
0 and 65535.  @var{initDPTR} is typically a label in a PCP data
section that points to the base address of a channel's parameter and
data storage area.  The linker will issue a warning message if the label
is not aligned to a 256-byte boundary; this is because the PCP accesses
the PRAM indirectly using a base-plus-offset addressing mode that can
address 64 32-bit words (256 bytes) starting at base, and because
the base address is always forced to a 256-byte boundary by hardware,
if the label is not aligned to a 256-byte boundary, only the word starting
at this label is guaranteed to be accessible.  @var{initDPTR} may also
be specified as an absolute expression that results in a value between
0 and 255.  @var{initFLAGS} are the initial status flags to be loaded
into the least significant eight bits of register @code{R7}; they may be
specified either as an absolute or symbolic expression that results in a
value between 0 and 255.  Note: because of the special semantics of this
pseudo-opcode, there is no need (actually, it is even an error) to use any
PCP-specific operand prefixes for labels used in symbolic expressions for
@code{initPC} and @code{initDPTR}.

@cindex @code{uahalf} pseudo-opcodes, TriCore
@item .uahalf @code{expr}
Evaluates the expression @code{expr} and appends the 16-bit result to
the current section without any alignment.  Used for storing DWARF debugging
information.

@cindex @code{uaword} pseudo-opcodes, TriCore
@item .uaword @code{expr}
Evaluates the expression @code{expr} and appends the 32-bit result to
the current section without any alignment.  Used for storing DWARF debugging
information.

@cindex @code{uaxword} pseudo-opcodes, TriCore
@item .uaxword @code{expr}
Evaluates the expression @code{expr} and appends the 64-bit result to
the current section without any alignment.  Used for storing DWARF debugging
information.

@cindex @code{bit} pseudo-opcodes, TriCore
@item .bit @var{bname}[,[@code{bexpr}][,@code{bsection}]]
Creates a global bit variable named @var{bname} in section @code{bsection}
and initializes it with the value of the absolute expression @code{bexpr}.
If @code{bexpr} is omitted, @var{bname} will be uninitialized, and the name
of @code{bsection}, if specified, must either be @code{.bbss}, or begin with
the string @code{.bbss.}; if @code{bsection} is not specified, it defaults
to @code{.bbss}.  If @code{bexpr} is specified, its result must be either
0 or 1, and the name of @code{bsection}, if specified, must either be
@code{.bdata}, or begin with the string @code{.bdata.}; if @code{bsection}
is not specified, it defaults to @code{.bdata}.  A bit variable consists of
two parts: a byte address, and a bit position within this byte that denotes
where the contents of the variable is actually stored; bit positions are hold
by symbols in the @code{.boffs} section.  Initially, @code{@value{AS}} reserves
one byte of memory for each bit variable; when linking the final application,
you may pass the option @code{--relax-bdata} (or @code{-relax}) to
@code{tricore-ld} to compress bit data sections such that up to eight bit
variables are allocated in a single byte.  To access a bit variable, use its
symbolic name to specify the byte address, and the prefix @code{bpos:} to
specify the bit position (e.g., @code{.bit foo; st.t foo,bpos:foo,1}).  Since
TriCore's @code{st.t} instruction uses the absolute addressing mode to access
bit variables, you need to make sure that all @code{.bdata[.*]} and
@code{.bbss[.*]} sections are allocated in absolute addressable memory areas.

@cindex @code{lbit} pseudo-opcodes, TriCore
@item .lbit @var{bname}[,[@code{bexpr}][,@code{bsection}]]
This does the same as @code{.bit} (described above), except that the bit
variable that is being created will have local scope, i.e., it will not
be visible outside the current module.  Note that it is not possible to
use the @code{.global} pseudo-opcode to later change the scope of a bit
variable created by @code{.lbit} from local to global.

@cindex @code{bpos} pseudo-opcodes, TriCore
@item .bpos @var{bname}
This appends a byte holding the bit position of the bit variable @var{bname}
to the current section.  @var{bname} must have been created using one of the
@code{.bit} or @code{.lbit} pseudo-opcodes, or else the linker will complain
that @var{bname} is not a valid bit variable.  Used for storing DWARF debugging
information.

@end table

@node TriCore Syntax
@section TriCore Assembler Syntax

@menu
* TriCore-Chars::               Special Characters
* TriCore-Regs::                Register Names
* TriCore-Prefs::               Operand Prefixes
* TriCore-Opcs::                Opcodes
@end menu

@node TriCore-Chars
@subsection Special Characters

@cindex TriCore line comment character
@cindex line comment character, TriCore
@samp{#} is the line comment character; i.e., all characters following
@samp{#} to the end of the line are ignored.

@cindex TriCore statement separator
@cindex statement separator, TriCore
@cindex TriCore line separator
@cindex line separator, TriCore
@samp{;} can be used instead of a newline to separate statements.

@cindex TriCore floating point
@cindex floating point, TriCore
Floating point numbers can be identified by a @code{0f} or
@code{0F} prefix (single precision, 4 bytes), and by a @code{0d}
or @code{0D} prefix (double precision, 8 bytes).  Examples:
@code{0f12.456}, @code{0D1.2345e12}.  In addition, you can use
the @code{.float} and @code{.double} pseudo-opcodes to generate
IEEE-complient floating point numbers.

@node TriCore-Regs
@subsection Register Names

@cindex TriCore registers
@cindex register names, TriCore
The TriCore architecture has 16 general purpose data registers which
can be referred to as @code{%d0}-@code{%d15} or @code{%D0}-@code{%D15}.
A pair of two consecutive data registers (starting with an even-numbered
register) can form an extended data register.  Eight such extended
registers exist on the TriCore, and their names are @code{%e0},
@code{%e2}, @code{%e4}, ..., @code{%e14}.  You can also use a capital
'E' to denote an extended register (e.g., @code{%E6}).  Alternatively,
you may also use the notation @code{%dn+} or @code{%Dn+} to refer to
the extended data register @code{%en} (n = 0, 2, 4, ..., 14).  Several
TriCore instructions perform different operations depending on
whether an operand is a single or an extended data register.  For
instance, @code{mul %e0,%d3,%d4} computes the 64-bit product of registers
@code{%d3} and @code{%d4} and assigns it to @code{%d0} and @code{%d1},
while @code{mul %d0,%d3,%d4} computes the 32-bit product of @code{%d3}
and @code{%d4} and assigns it to register @code{%d0}.

The 16 general purpose address registers can be specified as
@code{%a0}-@code{%a15} or @code{%A0}-@code{%A15}.  The stack pointer
(@code{%a10}) may also be specified as @code{%sp} or @code{%SP}.  Some
TriCore instructions and address modes require an address register
pair.  However, unlike the data registers, there is no special
notation for such register pairs and you simply need to specify
the name of the pair's first (even-numbered) address register.

The special function registers (SFRs) of the TriCore architecture
must be prefixed with a @samp{$} character;  their names are those
defined in the @samp{TriCore Architecture Manual}, and they are
parsed case-insensitivly.  For instance, @code{mfcr %d8,$psw} is
identical to @code{mfcr %d8,$PSW}.  Core SFRs are resolved to an
unsigned 16-bit number representing their offset from TriCore's
SFR base address, so you can use them as an operand for all
TriCore instructions that allow 16-bit constants (in other words,
their use is not restricted to @code{mfcr} and @code{mtcr} instructions).
In addition, all non-core SFRs that can be accessed using TriCore's
18-bit absolute addressing mode are known to @code{as} which allows
instructions such as @code{st.w $buscon0,%d13}.  The value of
these symbols is the 32-bit address of the corresponding SFR.


@node TriCore-Prefs
@subsection Operand Prefixes

@cindex TriCore-prefixes
The following operand prefixes are recognized by the TriCore version
of @code{as}:

@table @code
@item hi:@var{symbol_or_expression}
Returns the high part (16 bits) of @var{symbol_or_expression} by
adding 0x8000 to the 32-bit value of @var{symbol_or_expression} and then
right-shifting the result by 16 bits.  If the value of
@var{symbol_or_expression} isn't known at assemble time, a special
relocation entry is generated for the linker to resolve.
@smallexample
Example: @samp{movh.a %a15,hi:foo}
@end smallexample

@item lo:@var{symbol_or_expression}
Returns the lower 16 bits of @var{symbol_or_expression}.
If the 32-bit value of @var{symbol_or_expression} isn't known at assemble
time, a special relocation entry is generated for the linker to resolve.
@smallexample
Example: @samp{lea %a15,[%a15]lo:foo}
@end smallexample

@item sm:@var{symbol}
Returns the 10-bit offset of @var{symbol} within the small data area;
since the assembler cannot know this offset, it generates a special
relocation entry for the linker to resolve.
@smallexample
Example: @samp{ld.w %d4,[%a0]sm:foo}
@end smallexample

@item up:@var{symbol_or_expression}
Returns the upper 16 bits of @var{symbol_or_expression}. If the value of
@var{symbol_or_expression} isn't known at assemble time, a special
relocation entry is generated for the linker to resolve.
@smallexample
Example: @samp{mov %d12,up:foo}
@end smallexample

@item bpos:@var{symbol}
Returns the 3-bit bit position of bit variable @var{symbol}.  (Actually,
this computation is done by the linker; the assembler merely generates a
special relocation entry for the current instruction.)  It is an error
if @var{symbol} has not been created by a @code{.bit} or @code{.lbit}
pseudo-opcode.
@smallexample
Example: @samp{ld.b %d4,mybit; extr.u %d4,%d4,bpos:mybit,1}
@end smallexample

@end table
When operating in PCP mode, @code{as} accepts the following prefixes:

@table @code
@item cptr:@var{symbol}
Returns the 16-bit PCP code address of the label @code{symbol}, which
must be defined in some PCP code section.  (Actually, this computation
is done by the linker; the assembler merely generates a special relocation
entry for the current instruction.)  Note: it is not required to use
this prefix when specifying symbolic target addresses for the jump
instructions @code{jc}, @code{jc.a} and @code{jl}, because it is clear
in these cases that @code{symbol} should resolve to its PCP code address.
@smallexample
Example: @samp{ldl.il r2,cptr:return_address}
@end smallexample

@item dptr:@var{symbol}
Returns the 8-bit PRAM data page number, left-shifted by 8 bits, of the label
@code{symbol}, which must be defined in some PCP data section; the actual
value returned is thus 16 bits wide, with the low byte cleared.  (Actually,
this computation is done by the linker; the assembler merely generates a
special relocation entry for the current instruction).  Note: @code{symbol}
must be at least word-aligned, and should be aligned to a 256-byte
boundary.  For an explanation, @pxref{TriCore Pseudo-opcodes,,@code{.pcpinitword}}.
@smallexample
Example: @samp{ldl.il r7,dptr:chan4_vars}
@end smallexample

@item doff:@var{symbol}
Returns the 6-bit PRAM data page offset of the label @code{symbol}, which
must be defined in some PCP data section.  (Actually, this computation is
done by the linker; the assembler merely generates a special relocation
entry for the current instruction).  Note: @code{symbol} must be
word-aligned.  Also, it is not required to use this prefix when
specifying symbolic offsets for instructions that indirectly access the
PRAM (i.e., all PCP instructions carrying the suffix @code{.PI}), because
it is clear in these cases that @code{symbol} should resolve to its PRAM
data page offset.
@smallexample
Example: @samp{ld.pi r3,[doff:X_val]; ldl.il r5,doff:foo}
@end smallexample

@end table

@node TriCore-Opcs
@subsection Opcodes

@cindex TriCore-opcodes
The opcodes (mnemonics) that are recognized by the TriCore version of
@code{as} are exactly those described in the @samp{TriCore Architecture
Manual}.

No special suffix is available to identify 16-bit instructions,
but you can always use the @code{.code16} and @code{.code32}
pseudo-opcodes to explicitly select the 16-bit or 32-bit version of an
instruction.

There is an additional opcode, @code{not}, that is recognized and
automatically converted into a @code{nor} instruction.  So, you can
write @code{not %dn} instead of @code{nor %dn} or @code{nor %dn,%dn,0}.

The syntax of the opcodes, operands and addressing modes is also exactly
as described in the manual mentioned above, except that registers must
be prefixed with a @code{%} character, and SFRs must be prefixed with
a @code{$} character.  This is necessary in order to distinguish between
register names and user-defined symbols, and between registers and SFRs,
respectively (note that @code{%d0} is different from @code{$d0}:  the
former represents the first data register, while the latter represents
the offset of this register to the SFR base address).

All PC-relative jump and call instructions are subject to relaxation
in order to find the smallest possible instruction (or instruction
sequence) that can reach the specified target.  The maximum allowed
displacement for local branches is +/-16 MB.  @code{call}, @code{fcall},
@code{j} and @code{jl} instructions branching to global functions can
be relaxed by the linker to reach any valid code address within TriCore's
entire 32-bit address space; you need to pass the option @code{--relax-24rel}
(or @code{-relax}) to @code{tricore-ld} in order to enable this feature.


@node TriCore PCP Support
@section TriCore PCP support

The TriCore version of @code{as} recognizes PCP (Peripheral Control
Processor) instructions up to V2.0.  All you need to do in order to
specify PCP code or data is to use the pseudo-opcodes @code{.pcptext}
and @code{.pcpdata}, respectively, which enter the relevant sections.
Alternatively, you may also define arbitrarily named PCP code and data
sections by adding the letter 'p' to the section flags for these sections.
For instance, @code{.section .pcode,"axp",@@progbits} defines (and
enters) a PCP code section named @code{.pcode}; likewise, use the
section flags @code{"awp"} to define a PCP data section.

The startup code (crt0.o, part of the TriCore port of GCC) takes care
of copying the PCP code and data sections to TriCore's internal
PCODE and PRAM memory areas (as defined in a linker script), so if your
C or C++ program that makes use of the PCP reaches its @code{main()}
function, the PCP code and data sections are already in place.  Of
course, you still need to initialize all relevant hardware registers
in order to activate the PCP; see the TriCore and PCP manuals for details.

There are no special provisions in @code{as} to specify for which
particular version of PCP you want to assemble code.  If you want to
assemble for PCP 1.x, just don't use instructions or features that are
only available in PCP 2.0.  Reversely, if PCP 2.0 introduced new operands
for certain instructions, just specify them with a value of zero,
should you need compatibility with PCP 1.x.

You can write PCP instructions and operands in small or capital letters
(e.g., @samp{NeG  cC_Uc,R4,r5} and @samp{neg  cc_uc,r4,r5} are identical),
except for symbols and labels, which must be written exactly as you defined
them.  If an instruction takes several operands, they need to be separated
by commas (e.g. @samp{comp.i  r3,32}); there can be any number of spaces
and tabs between the mnemonic and the first operand, as well as between an
operand and the comma preceding or following it (unless it's the first or
last operand, where no preceding or trailing comma is allowed).

Please note that there are no special prefixes to distinguish keywords
reserved by the PCP assembler (e.g. unlike with TriCore instructions,
registers are not prefixed with a percent character ("%")), so you need
to make sure that the names of labels and symbols don't clash with such
PCP keywords: it's not wise to call a label or symbol @samp{cc_uc}, as
it would interfere with PCP's condition codes, or @samp{r6}, which
@code{as} would recognize as PCP register @code{R6}.

Upon entering a PCP code or data section, @code{as} recognizes PCP
instructions exactly as described in the
@samp{PCP 2.0 Assembler Mnemonics Specification, Mar. 2000}, with the
following additions and exceptions:

@table @code
@item DEBUG
The @code{debug} instruction takes a parameter that describes whether
the program, when resumed, should be continued at the same or the next
instruction.  This parameter can be specified as either @code{RTA} or
@code{RNA}.

@item MSTEP
You may write either @code{mstep.l} or @code{mstep32}, as well as either
@code{mstep.u} or @code{mstep64}.

@item LDL
According to the specification, @code{ldl.iu} and @code{ldl.il} take a
16-bit expression as their second operand.  @code{as}, however, expects
a 32-bit expression; in case of @code{ldl.iu}, the upper 16 bits of the
expression's value are taken, while for @code{ldl.il} the lower 16 bits
are taken.  If you need to port existing PCP code to GNU @code{as}, make
sure to left-shift the expression for @code{ldl.iu} instructions by 16
bits (e.g. @samp{ldl.iu  r4,1234 << 16}).

@item JC
If this jump instruction cannot reach its target (due to its limited
6-bit offset), @code{as} automatically expands it into a @code{jc.a}
instruction that can reach any address within the PCP code space.  In
addition, if the target address of an unconditional @code{jc} instruction
(e.g, @code{jc label,cc_uc}) cannot be reached with a 6-bit offset,
but with a 10-bit offset, it will be replaced with a @code{jl} instruction.

@item JL
If this jump instruction cannot reach its target (due to its limited
10-bit offset), @code{as} automatically expands it into a @code{jc.a}
instruction that can reach any address within the PCP code space.

@item EXB, EXIB
In accordance with the PCP Assembler Mnemonics Specification, @code{as}
supports two additional opcodes for extracting (inverted) bits:
@samp{exb  ra,n} is equivalent to @samp{chkb  ra,n,set}, and
@samp{exib  ra,n} is equivalent to @samp{chkb  ra,n,clr} (where @samp{ra}
is one of the registers @code{r0-r7}, and @samp{n} denotes the number of
the bit to be extracted).

@item Indirection
If an operand (register or constant) is used to access memory indirectly,
you may, at your option, wrap it in square brackets (e.g. @samp{[r4]}).
This is completely in compliance with the specification mentioned above;
however, there are no options which let you specify if the use of such
indirection specifiers (read: square brackets) is illegal, optional, or
mandatory.  This means you can't change the default, which is "optional".
Of course, if you use indirection specifiers at places where they're not
allowed, you'll get an error message, which again is compliant with the
Assembler Mnemonics Specification.
@end table

With the exception of the three 32-bit instructions @code{ldl.iu}, 
@code{ldl.il} and @code{jc.a}, the two PC-relative jump instructions
@code{jl} and @code{jc}, and instructions carrying a @code{.PI} suffix,
all symbols used in operand expressions must be known at the time the
assembler evaluates these expressions in order to finalize the instruction's
opcode.

It seems that in some PCP manuals issued by Infineon different names are
used for the operand @code{CNT0} that is part of the @code{copy} and
@code{bcopy} instructions.  Sometimes it is referred to as @code{RC0},
sometimes as @code{BRST}, and maybe there are even other variations
mentioned.  Please use the operand name @code{CNT0} to set the reload
value for counter 0 in the above instructions.
